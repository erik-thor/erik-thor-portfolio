'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash.debounce');

var _lodash2 = _interopRequireDefault(_lodash);

var _lodash3 = require('lodash.throttle');

var _lodash4 = _interopRequireDefault(_lodash3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PendingList = function () {
  _createClass(PendingList, null, [{
    key: 'generateKey',
    value: function generateKey(lazy) {
      var _lazy$props = lazy.props,
          th = _lazy$props.throttle,
          db = _lazy$props.debounce;

      return th + '_' + db;
    }
  }]);

  function PendingList() {
    _classCallCheck(this, PendingList);

    this.groups = new Map();
  }

  _createClass(PendingList, [{
    key: 'add',
    value: function add(lazy) {
      var container = lazy.getContainer();
      var key = PendingList.generateKey(lazy);

      // Exits if throttle value is 0 (is this necessary?)
      if (lazy.props.throttle <= 0) return;

      // Get group' by container
      var group = this.groups.get(container);
      if (!group) {
        group = {};
        this.groups.set(container, group);
      }

      // Get 'checker' by generated key
      // 'checker' has a list of LazyFastdom instances and a
      // function that checks visibility of those instances.
      var checker = group[key];
      if (!checker) {
        var list = []; // list of lazy instances;

        var _lazy$props2 = lazy.props,
            th = _lazy$props2.throttle,
            db = _lazy$props2.debounce;


        checker = {
          list: list,
          func: (db ? _lodash2.default : _lodash4.default)(function () {
            return list.forEach(function (lazyInstance) {
              return lazyInstance.checkVisibility();
            }, th);
          })
        };

        group[key] = checker;

        // Add eventListeners
        window.addEventListener('resize', checker.func);
        container.addEventListener('scroll', checker.func);
        container.addEventListener('touchmove', checker.func);
        container.addEventListener('transitionend', checker.func);
      }

      // Add lazy instance
      checker.list.push(lazy);
    }
  }, {
    key: 'remove',
    value: function remove(lazy) {
      var container = lazy.getContainer();
      var key = PendingList.generateKey(lazy);

      var group = this.groups.get(container);

      var checker = group[key];

      // WARNING - checker must never be falsy at this point!!
      if (!checker) return; // Do nothing. Handler does not exist.

      var func = checker.func,
          list = checker.list;

      // Get index of lazy instance

      var index = list.indexOf(lazy);
      if (index === -1) return; // not in the list -> already removed!

      // Remove this lazy instance from checker
      list.splice(index, 1);

      if (!list.length) {
        // Cancel function execution
        func.cancel();

        // Remove eventListeners if there are no more lazy instances
        window.removeEventListener('resize', func);
        container.removeEventListener('scroll', func);
        container.removeEventListener('touchmove', func);
        container.removeEventListener('transitionend', func);

        // Remove checker
        delete group[key];
      }
    }
  }]);

  return PendingList;
}();

exports.default = PendingList;